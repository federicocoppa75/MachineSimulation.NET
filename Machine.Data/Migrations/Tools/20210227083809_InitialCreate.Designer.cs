// <auto-generated />
using System;
using Machine.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Machine.Data.Migrations.Tools
{
    [DbContext(typeof(ToolsContext))]
    [Migration("20210227083809_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Machine.Data.Tools.Tool", b =>
                {
                    b.Property<int>("ToolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConeModelFile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToolLinkType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToolSetID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ToolID");

                    b.HasIndex("ToolSetID");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Machine.Data.Tools.ToolSet", b =>
                {
                    b.Property<int>("ToolSetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ToolSetID");

                    b.ToTable("ToolSets");
                });

            modelBuilder.Entity("Machine.Data.Tools.CountersinkTool", b =>
                {
                    b.HasBaseType("Machine.Data.Tools.Tool");

                    b.Property<double>("Diameter1")
                        .HasColumnType("REAL");

                    b.Property<double>("Diameter2")
                        .HasColumnType("REAL");

                    b.Property<double>("Length1")
                        .HasColumnType("REAL");

                    b.Property<double>("Length2")
                        .HasColumnType("REAL");

                    b.Property<double>("Length3")
                        .HasColumnType("REAL");

                    b.Property<double>("UsefulLength")
                        .HasColumnType("REAL");

                    b.ToTable("CountersinkTool");
                });

            modelBuilder.Entity("Machine.Data.Tools.DiskTool", b =>
                {
                    b.HasBaseType("Machine.Data.Tools.Tool");

                    b.Property<double>("BodyThickness")
                        .HasColumnType("REAL");

                    b.Property<double>("CuttingRadialThickness")
                        .HasColumnType("REAL");

                    b.Property<double>("CuttingThickness")
                        .HasColumnType("REAL");

                    b.Property<double>("Diameter")
                        .HasColumnType("REAL");

                    b.Property<double>("RadialUsefulLength")
                        .HasColumnType("REAL");

                    b.ToTable("DiskTool");
                });

            modelBuilder.Entity("Machine.Data.Tools.PointedTool", b =>
                {
                    b.HasBaseType("Machine.Data.Tools.Tool");

                    b.Property<double>("ConeHeight")
                        .HasColumnType("REAL");

                    b.Property<double>("Diameter")
                        .HasColumnType("REAL");

                    b.Property<double>("StraightLength")
                        .HasColumnType("REAL");

                    b.Property<double>("UsefulLength")
                        .HasColumnType("REAL");

                    b.ToTable("PointedTool");
                });

            modelBuilder.Entity("Machine.Data.Tools.SimpleTool", b =>
                {
                    b.HasBaseType("Machine.Data.Tools.Tool");

                    b.Property<double>("Diameter")
                        .HasColumnType("REAL");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.Property<double>("UsefulLength")
                        .HasColumnType("REAL");

                    b.ToTable("SimpleTool");
                });

            modelBuilder.Entity("Machine.Data.Tools.TwoSectionTool", b =>
                {
                    b.HasBaseType("Machine.Data.Tools.Tool");

                    b.Property<double>("Diameter1")
                        .HasColumnType("REAL");

                    b.Property<double>("Diameter2")
                        .HasColumnType("REAL");

                    b.Property<double>("Length1")
                        .HasColumnType("REAL");

                    b.Property<double>("Length2")
                        .HasColumnType("REAL");

                    b.Property<double>("UsefulLength")
                        .HasColumnType("REAL");

                    b.ToTable("TwoSectionTool");
                });

            modelBuilder.Entity("Machine.Data.Tools.DiskOnConeTool", b =>
                {
                    b.HasBaseType("Machine.Data.Tools.DiskTool");

                    b.Property<double>("PostponemntDiameter")
                        .HasColumnType("REAL");

                    b.Property<double>("PostponemntLength")
                        .HasColumnType("REAL");

                    b.ToTable("DiskOnConeTool");
                });

            modelBuilder.Entity("Machine.Data.Tools.Tool", b =>
                {
                    b.HasOne("Machine.Data.Tools.ToolSet", null)
                        .WithMany("Tools")
                        .HasForeignKey("ToolSetID");
                });

            modelBuilder.Entity("Machine.Data.Tools.CountersinkTool", b =>
                {
                    b.HasOne("Machine.Data.Tools.Tool", null)
                        .WithOne()
                        .HasForeignKey("Machine.Data.Tools.CountersinkTool", "ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Machine.Data.Tools.DiskTool", b =>
                {
                    b.HasOne("Machine.Data.Tools.Tool", null)
                        .WithOne()
                        .HasForeignKey("Machine.Data.Tools.DiskTool", "ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Machine.Data.Tools.PointedTool", b =>
                {
                    b.HasOne("Machine.Data.Tools.Tool", null)
                        .WithOne()
                        .HasForeignKey("Machine.Data.Tools.PointedTool", "ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Machine.Data.Tools.SimpleTool", b =>
                {
                    b.HasOne("Machine.Data.Tools.Tool", null)
                        .WithOne()
                        .HasForeignKey("Machine.Data.Tools.SimpleTool", "ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Machine.Data.Tools.TwoSectionTool", b =>
                {
                    b.HasOne("Machine.Data.Tools.Tool", null)
                        .WithOne()
                        .HasForeignKey("Machine.Data.Tools.TwoSectionTool", "ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Machine.Data.Tools.DiskOnConeTool", b =>
                {
                    b.HasOne("Machine.Data.Tools.DiskTool", null)
                        .WithOne()
                        .HasForeignKey("Machine.Data.Tools.DiskOnConeTool", "ToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Machine.Data.Tools.ToolSet", b =>
                {
                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
